##############################################################################
# 05.12.2017, mislin create file
# 	current lib versions are:
# 		- libusb 1.0.21

#	tested @ 05.12.2017 - 21:00 by mislin
#
##############################################################################

[requires]			
libusb/1.0.21@uilianries/stable # current package to build

[generators]			# compiler which should used to link
# Note:
# package manager is depending of IDE
qmake
#cmake

[options]			# link lib static od dynamic
# Note:
# If a lib is NOT set on ":shared=True" they will build as a 
# static lib .a (linux,mac,ios) or .lib (windows). 
#
# A static library(.a) or (.lib) is a library that can be linked directly into the 
# final executable produced by the linker,it is contained in it and there is no need 
# to have the library into the system where the executable will be deployed.
#
# A shared library(.so), (.dylib) or (.dll) is a library that is linked but not embedded
# in the final executable, so will be loaded when the executable is launched and need 
# to be present in the system where the executable is deployed. See following link:
# 
#
# A dynamic link library on windows(.dll) is like a shared library(.so) on linux or a 
# dynamic library(.dylib) on mac os but there are some differences between the two 
# implementations that are related to the OS (Windows vs Linux):
#
#   A DLL can define two kinds of functions: exported and internal. The exported 
#   functions are intended to be called by other modules, as well as from within 
#   the DLL where they are defined. Internal functions are typically intended to 
#   be called only from within the DLL where they are defined.
#
#   An SO library on Linux doesn't need special export statement to indicate exportable 
#   symbols, since all symbols are available to an interrogating process.

# @ Windows: build dyn. lib file libusb.dll
# @ Linux: build dyn. lib file libusb.so
# @ Mac: build dyn. lib file libusb.dylib
libusb:shared=True	

[imports]			# copy files into project directory
# Note:
# You can explore the package folder in your local cache (~/.conan/data) and 
# look where the shared libraries are. It is common that *.dll are copied in 
# /bin the rest of the libraries *.a & *.dylib should be found in the /lib 
# folder. But it is just a convention, different layouts are possible.
#
# To find lib files go to local cache and search for lib files acc. OS(*.dll / *.so / *.dylib)
# Local cache @ Windows: 	C:\Users\<my user name>\.conan\data\
# Local cache @ Linux:		/home/<my user name>/.conan/data/
# Local cache @ Mac:		/home/<my user name>/.conan/data/

# @ all OS
include/libusb-1.0, libusb.h -> ./include

# @ Windows OS copy lib files *.dll from directroy /bin into project directory ./lib
bin, *.dll -> ./bin
 
# @ Linux OS copy lib files *.a from directroy /lib into project directory ./lib 
lib, *.so -> ./lib
lib, *.so.1 -> ./lib

# @ Mac OS copy lib files *.dylib from directroy /lib into project directory ./lib 
lib, *.dylib -> ./lib #TODO: Test if it is working with Mac OS
